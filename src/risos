#!/bin/bash

#Variáveis do script
dir_riso=/usr/riso	#diretorio do riso
dir_img=$dir_riso/imagens	#diretorio da imagem
img_win=$dir_img/windows.img	#arquivo da imagem do windows
img_lin=$dir_img/linux.tar	#arquivo da imagem do linux
img_rec=$dir_img/rec.tar	#arquivo da imagem da recuperacao (ubuntu_server)
tor_win=$img_win.torrent	#torrent da imagem do windows
tor_lin=$img_lin.torrent	#torrent da imagem do linux
riso_service=/etc/avahi/services/riso.service	#servico do servidor de imagem
tab_part=$dir_img/tab_part	#cfdisck -d ; salva tabela de partição no servidor para poder instalar a recuperaçao no cliente
riso_part=$dir_riso/riso.part	#salva partiçães dos respectivos sistemas	
arq_log=$dir_riso/riso.log	#Arquivo de log

#Função de Log
log(){
    [ -e $arq_log ] || touch $arq_log
    echo `date +"%F %H:%M:%S"` "RISOS: $*" >> $arq_log 
}

#Carrega variaveis do arquivo riso.service para variáveis do sistema.
carrega_variaveis() {

    avahi_saida=`avahi-browse -rtp _DECOM_RISO._tcp | grep '='`
    servidor=`ip route | grep src | cut -d ' ' -f12` #modificacao ip do servidor.
    if [ -z $servidor ]; then
        dialog \
        --title 'Atencao' \
        --ok-label 'OK' \
        --msgbox 'O servidor RISOS precisa estar conectado à rede.\nVerifique a conexão e tente novamente.' \
        7 45
        log "ERRO: Servidor não encontrado na rede."
        exit 1
    fi
    partwindows=`(cut -d ';' -f10 | cut -d '"' -f2 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Windows.
    partlinux=`(cut -d ';' -f10 | cut -d '"' -f4 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição com Linux.
    partrec=`(cut -d ';' -f10 | cut -d '"' -f6 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição de Recuperação.
    partswap=`(cut -d ';' -f10 | cut -d '"' -f8 | cut -d '=' -f2) <<< ${avahi_saida}` #Partição Swap.

    #Tamanho total das imagens criadas no servidor.
    tamwindows=`(cut -d ';' -f10 | cut -d '"' -f10 | cut -d '=' -f2) <<< ${avahi_saida}`
    tamlinux=`(cut -d ';' -f10 | cut -d '"' -f12 | cut -d '=' -f2) <<< ${avahi_saida}`

    #Sistema de arquivo das partições.
    sa_partwindows=`(cut -d ';' -f10 | cut -d '"' -f14 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partlinux=`(cut -d ';' -f10 | cut -d '"' -f16 | cut -d '=' -f2) <<< ${avahi_saida}`
    sa_partrec=`(cut -d ';' -f10 | cut -d '"' -f18 | cut -d '=' -f2) <<< ${avahi_saida}`
    
    #Atualiza arquivo de variaveis.
    echo 'partwindows='$partwindows > $riso_part
    echo 'partlinux='$partlinux >> $riso_part
    echo 'sa_partwindows='$sa_partwindows >> $riso_part
    echo 'sa_partlinux='$sa_partlinux >> $riso_part
}

#Inicia tracker para disponibilizar imagens na rede.
inicia_servidor() {

	if [ -e ${img_win} -a -e ${img_lin} ]; then
	    log "Tracker iniciado para Windows e Linux."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}	
		rtorrent ${tor_lin} ${tor_win}
		log "Tracker finalizado para Windows e Linux."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\n   Não existem imagens prontas.' \
		7 40
		log "ERRO: Ao iniciar tracker para Windows e Linux, Não existem imagens prontas."
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Windows na rede.
inicia_servidor_windows() {

	if [ -e ${img_win} ]; then
    	log "Tracker iniciado para Windows."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}
		rtorrent ${tor_win}
		log "Tracker finalizado para Windows."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do windows.' \
		7 45
		log "ERRO: Ao iniciar tracker para Windows, Não existe imagem pronta."
		return 2
	fi
	
}

#Inicia tracker para disponibilizar imagem do Linux na rede.
inicia_servidor_linux() {

	if [ -e ${img_lin} ]; then
	    log "Tracker iniciado para Linux."
		bttrack --port 6969 --dfile dstate | grep laialadaiasabadanaavemaria &
		cd ${dir_img}		
		rtorrent ${tor_lin}
		log "Tracker finalizado para Linux."
	else
		dialog \
		--title 'Atenção' \
		--ok-label 'OK' \
		--msgbox '\nVocê ainda não criou a imagem do linux.' \
		7 44
		log "ERRO: Ao iniciar tracker para o Linux, Não existe imagem pronta."
		return 2
	fi

}

#Cria imagem do Linux.
cria_linux() {

    log "Criando imagem do Linux."
	echo "Removendo imagem antiga do linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}
	
	#Cria arquivo .tar do linux
	umount /mnt 2> /dev/null
	mount ${partlinux} /mnt
	cd /mnt
	tar -cvf ${img_lin} *
	
	#Atualiza Sistema de arquivo da partição no riso.service
	sa_partlinux=`blkid ${partlinux} | cut -d'"' -f4`
	sed "s/sa_partlinux=[^<]*/sa_partlinux=${sa_partlinux}/" < ${riso_service} > ${riso_service}.tmp
	mv ${riso_service}.tmp ${riso_service}
	
	umount /mnt 2> /dev/null
	log "Imagem do Linux criada."
}

#Cria arquivo .torrent para imagem do linux
cria_torrent_linux() {
	
	if [ -e $img_lin ]; then
	    log "Criando arquivo torrent do linux."
	    #Cria o torrent
	    btmakemetafile.bittorrent ${img_lin} http://${servidor}:6969/announce 2> /dev/null
	
	    #Atualiza o IP do servidor no riso.service
        servidor_antigo=`cat ${riso_service} | grep Servidor= | cut -d '<' -f2 | cut -d '>' -f2`    # modificacao pega ip antigo do arquivo riso.sevice
        sed "s/$servidor_antigo*/Servidor=${servidor}/" < ${riso_service} > ${riso_service}.tmp #
        mv ${riso_service}.tmp ${riso_service}
        
        #Escreve o tamanho da imagem no riso.service
	    tam=`du ${img_lin} | cut -f1` 
	    sed "s/tamlinux=[0-9]*/tamlinux=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}

	    log "Arquivo torrent do Linux criado."
	else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do Linux.' \
        7 44
        log "ERRO: Ao criar arquivo torrent do Linux, não existe imagem pronta."
        return 2
	fi
	
}

#Cria imagem do Windows.
cria_windows() {
	
	log "Criando imagem do Windows."
	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
    rm -f ${tor_win}

    #Cria arquivo .img do windows
    umount ${partwindows} 2> /dev/null
    ntfsclone -s -O ${img_win} ${partwindows}
    
    #Se não conseguiu criar a imagem
    if [ "$?" -ne "0" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox 'Não consegui criar uma imagem do Windows.\n
O sistema operacional pode ainda não ter sido instalado.\n
A partição ou o sistema de arquivo indicados pelas variáveis\n
partwindows e sa_partwindows em /etc/avahi/services/riso.service\n
pode estar incorreta.\n' \
        0 0
        log "ERRO: Ao criar imagem do Windows, ntfsclone falhou ao criar arquivo windows.img."
        return 3
    fi
    #Atualiza Sistema de arquivo da partição no riso.service
	sa_partwindows=`blkid ${partwindows} | cut -d'"' -f4`
	sed "s/sa_partwindows=[^<]*/sa_partwindows=${sa_partwindows}/" < ${riso_service} > ${riso_service}.tmp
	mv ${riso_service}.tmp ${riso_service}
	log "Imagem do Windows criada."
	
}

#Cria arquivo .torrent para imagem do linux.
cria_torrent_windows() {
	
	if [ -e ${img_win} ]; then
	    log "Criando arquivo torrent do windows."
        btmakemetafile.bittorrent ${img_win} http://${servidor}:6969/announce 2> /dev/null

	    #Atualiza o IP do servidor no riso.service
        servidor_antigo=`cat ${riso_service} | grep Servidor= | cut -d '<' -f2 | cut -d '>' -f2`    # modificacao pega ip antigo do arquivo riso.sevice
        sed "s/$servidor_antigo*/Servidor=${servidor}/" < ${riso_service} > ${riso_service}.tmp #
        mv ${riso_service}.tmp ${riso_service}
        
        #Escreve o tamanho da imagem no riso.service
	    tam=`du ${img_win} | cut -f1`
        sed "s/tamwindows=[0-9]*/tamwindows=${tam}/" < ${riso_service} > ${riso_service}.tmp
	    mv ${riso_service}.tmp ${riso_service}

	    log "Arquivo torrent do windows criado."
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do windows.' \
        7 45
        log "ERRO: Ao criar torrent do windows, não existe imagem pronta."
        return 2
    fi
}

#Cria imagem do SO com R.I.S.O. instalado.
cria_rec() {

    log "Criando imagem de recuperação."
	echo "Removendo imagem antiga do windows..."
	rm -f ${img_win}
	rm -f ${tor_win}
	echo "Removendo imagem antiga do Linux..."
	rm -f ${img_lin}
	rm -f ${tor_lin}
	echo "Removendo imagem antiga do Linux de recuperação..."
	rm -f ${img_rec}
	sfdisk -d /dev/sda > ${tab_part}
	umount -a 2> /dev/null
	cd /
	tar --exclude=home/remastersys --exclude=proc/* --exclude=risos --exclude=riso.service -cvf ${img_rec} *
	
	#Atualiza Sistema de arquivo da partição no riso.service
    sa_partrec=`df -T | awk 'NR==2{print $2}'`
    sed "s/sa_partrec=[^<]*/sa_partrec=${sa_partrec}/" < ${riso_service} > ${riso_service}.tmp
    mv ${riso_service}.tmp ${riso_service}
	log "Imagem de recuperação criada."
	
}

#Atualiza riso.
atualiza() {

	log "Iniciando atualização do script."
	log "Verificando disponibilidade do servidor de atualização."
	ping -q -c 1 200.131.37.236 > /dev/null 2>&1
	if [ "$?" -eq "0" ]; then
		log "Iniciando download do script novo."
		(wget 200.131.37.236/riso/risos0.5 -O /usr/riso/risos && log "RISO atualizado com sucesso.") || log "ERRO: Não foi possível baixar o novo script."
		
		#Menssagem de atualizado com sucesso.
		dialog \
	        --ok-label 'OK' \
        	--title 'Atenção' \
        	--msgbox '\n   RISOS atualizado com sucesso.\n' \
		    7 39
		
		bash /usr/riso/risos
		exit
	else
		dialog \
		--ok-label 'OK' \
		--title 'ERRO' \
		--msgbox '\n   Esta versão já é a mais recente.'\
		7 40
		log "ERRO: RISO já é a versão mais nova."
	fi
	
}

#Pessoas que desenvolveram esse material.
creditos() {

	dialog \
	--ok-label 'OK' \
	--title 'Creditos' \
	--msgbox '                                       \n
		 CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
		        Engenharia da Computaçao         \n
		                                         \n
		      Cristiano Goulart Lopes Dias       \n
		    Vinicius Tinti de Paula Oliveira     \n
		       Germano Teixeira de Miranda       \n
		        Gabriel de Souza Brandao         \n
		         Marcio J. Menezes Jr.           \n
		    Gabriel Machado de Castro Fonseca    \n
		      André Luiz Silveira Herculano      \n
		       Gilmar Pereira de Alcantara       \n
		                                         \n
		           www.dgo.cefetmg.br            \n
		                                         \n'\
		  0 0
}

#Notificação para imagem criada com sucesso
linux_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\nImagem do Linux criada com sucesso.\n' \
		7 40
}

#Notificação para imagem criada com sucesso
windows_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n Imagem do Windows criada com sucesso.\n' \
		7 43
}

#Notificação para imagem criada com sucesso
rec_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n Imagem de Recuperação criada com sucesso.\n' \
		7 47
}

#Notificação para imagens criadas com sucesso
imagens_criadas() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Imagens criadas com sucesso.\n' \
		7 37
}

#Notificação para torrent criado com sucesso
torrent_linux_criado() {

	dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Torrent Linux criado com sucesso.\n' \
		7 42
}

#Notificação para torrent criado com sucesso
torrent_windows_criado() {

    dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\n  Torrent Windows criado com sucesso.\n' \
		7 43
}

#Notificação para torrent criado com sucesso
torrents_criados() {

    dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
	--msgbox '\nTorrents do Windows e Linux criados com sucesso.\n' \
		8 0
}

#Acredite isso é um help.
helpi() {

	dialog \
	--ok-label 'OK' \
	--title 'Help' \
	--msgbox 'Envie um e-mail com suas duvidas e sugestões \n
para: "germano@comp.eng.br" e responderei o\n
mais rápido possível.' \
		0 0
}

#Cria um livecd do SO com o R.I.S.O instalado.
#Essa função foi criada com base no codigo do remastersys.
livecd() {

    log "Criando live-cd do riso."
    
    #Modifica rc.local
    cat /etc/rc.local | grep -v exit > /etc/rc.local.tmp
    echo "rm /etc/avahi/services/riso.service" >> /etc/rc.local.tmp
    echo "rm /usr/riso/risos" >> /etc/rc.local.tmp
    echo "rm /usr/bin/risos" >> /etc/rc.local.tmp
    echo "exit 0" >> /etc/rc.local.tmp
    mv /etc/rc.local.tmp /etc/rc.local 
    chmod +x /etc/rc.local

    # load the remastersys.conf file
    . /etc/remastersys.conf

    cdfs $@
    iso $@

    #Restaura rc.local
    cat /etc/rc.local | grep -v riso > /etc/rc.local.tmp
    mv /etc/rc.local.tmp /etc/rc.local
    chmod +x /etc/rc.local
    
    dialog \
	--ok-label 'OK' \
	--title 'Atenção' \
    --msgbox 'Arquivo de imagem criado com sucesso em:\n
/home/remastersys/riso0.5.iso.\n\n
Para garava-lo em um CD/DVD tente:\n
cdrecord -v -fs=16M speed=32 dev=1,0,0 -data /home/remastersys/riso0.5.iso\n\n
Identifique seu dev com: cdrecore -scanbus' \
    0 0
    log "Live-cd do riso criado."
}

#Função usada para criar o livecd do riso.
#Essa função foi criada com base no codigo do remastersys.
cdfs (){

#removing popularity-contest as it causes a problem when installing with ubiquity
apt-get -y -q remove popularity-contest

# check whether system is gnome or kde based to load the correct ubiquity frontend
if [ "`cat /etc/X11/default-display-manager`" = "/usr/bin/kdm" ]; then
apt-get -y -q install ubiquity-frontend-kde
apt-get -y -q remove ubiquity-frontend-gtk
else
apt-get -y -q install ubiquity-frontend-gtk
apt-get -y -q remove ubiquity-frontend-kde
apt-get -y -q install metacity
fi

# prevent the installer from changing the apt sources.list
if [ ! -f "/usr/share/ubiquity/apt-setup.saved" ]; then
cp /usr/share/ubiquity/apt-setup /usr/share/ubiquity/apt-setup.saved
fi

sleep 1

# Step 3 - Create the CD tree in $WORKDIR/ISOTMP
echo "Checking if the $WORKDIR folder has been created"
if [ -d "$WORKDIR" ]; then
rm -rf $WORKDIR/dummysys/var/*
rm -rf $WORKDIR/dummysys/etc/*
rm -rf $WORKDIR/ISOTMP/isolinux
rm -rf $WORKDIR/ISOTMP/grub
rm -rf $WORKDIR/ISOTMP/.disk

else
mkdir -p $WORKDIR/ISOTMP/casper
mkdir -p $WORKDIR/ISOTMP/preseed
mkdir -p $WORKDIR/dummysys/dev
mkdir -p $WORKDIR/dummysys/etc
mkdir -p $WORKDIR/dummysys/proc
mkdir -p $WORKDIR/dummysys/tmp
mkdir -p $WORKDIR/dummysys/sys
mkdir -p $WORKDIR/dummysys/mnt
mkdir -p $WORKDIR/dummysys/media/cdrom
mkdir -p $WORKDIR/dummysys/var
chmod ug+rwx,o+rwt $WORKDIR/dummysys/tmp

fi

if [ "$CDBOOTTYPE" = "ISOLINUX" ]; then
mkdir -p $WORKDIR/ISOTMP/isolinux
else
mkdir -p $WORKDIR/ISOTMP/boot/grub
fi

mkdir -p $WORKDIR/ISOTMP/.disk


echo "Copying /var and /etc to temp area and excluding extra files"

if [ "$EXCLUDES" != "" ]; then
for addvar in $EXCLUDES ; do
VAREXCLUDES="$VAREXCLUDES --exclude='$addvar' "
done
fi

rsync --exclude='*.log.*' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' $VAREXCLUDES-a /var/. $WORKDIR/dummysys/var/.
rsync $VAREXCLUDES-a /etc/. $WORKDIR/dummysys/etc/.

rm -rf $WORKDIR/dummysys/etc/X11/xorg.conf*
rm -rf $WORKDIR/dummysys/etc/resolv.conf
rm -rf $WORKDIR/dummysys/etc/hosts
rm -rf $WORKDIR/dummysys/etc/hostname
rm -rf $WORKDIR/dummysys/etc/timezone
rm -rf $WORKDIR/dummysys/etc/mtab
rm -rf $WORKDIR/dummysys/etc/fstab
rm -rf $WORKDIR/dummysys/etc/udev/rules.d/70-persistent*
rm -rf $WORKDIR/dummysys/etc/cups/ssl/server.crt
rm -rf $WORKDIR/dummysys/etc/cups/ssl/server.key
rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_rsa_key
rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_dsa_key.pub
rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_dsa_key
rm -rf $WORKDIR/dummysys/etc/ssh/ssh_host_rsa_key.pub
ls $WORKDIR/dummysys/var/lib/apt/lists | grep -v ".gpg" | grep -v "lock" | grep -v "partial" | xargs -i rm $WORKDIR/dummysys/var/lib/apt/lists/{} ; 

if [ "$1" = "dist" ]; then

echo "  " > $WORKDIR/dummysys/etc/gdm/gdm.conf-custom
rm -rf $WORKDIR/dummysys/etc/group
rm -rf $WORKDIR/dummysys/etc/passwd
rm -rf $WORKDIR/dummysys/etc/shadow
rm -rf $WORKDIR/dummysys/etc/shadow-
rm -rf $WORKDIR/dummysys/etc/gshadow
rm -rf $WORKDIR/dummysys/etc/gshadow-


find $WORKDIR/dummysys/var/run $WORKDIR/dummysys/var/log $WORKDIR/dummysys/var/mail $WORKDIR/dummysys/var/spool $WORKDIR/dummysys/var/lock $WORKDIR/dummysys/var/backups $WORKDIR/dummysys/var/tmp $WORKDIR/dummysys/var/crash -type f -exec rm {} \;

for i in dpkg.log lastlog mail.log syslog auth.log daemon.log faillog lpr.log mail.warn user.log boot debug mail.err messages wtmp bootstrap.log dmesg kern.log mail.info
do
        touch $WORKDIR/dummysys/var/log/${i}
done

# remove the non system users on the passwd and group files and copy them to dummysys

# see if any temp users left over from previous versions of remastersys as the process has now changed

grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print "/usr/sbin/userdel -f",$1}'> $WORKDIR/cleantmpusers
. $WORKDIR/cleantmpusers

grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd

grep '^[^:]*:[^:]*:[0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group

grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers1
grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers2
grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers3

cat $WORKDIR/tmpusers1 $WORKDIR/tmpusers2 $WORKDIR/tmpusers3 > $WORKDIR/tmpusers

cat $WORKDIR/tmpusers | while read LINE ;do

echo $LINE | xargs -i sed -e 's/,{}//g' $WORKDIR/dummysys/etc/group > $WORKDIR/dummysys/etc/group.new1
echo $LINE | xargs -i sed -e 's/{},//g' $WORKDIR/dummysys/etc/group.new1 > $WORKDIR/dummysys/etc/group.new2
echo $LINE | xargs -i sed -e 's/{}//g' $WORKDIR/dummysys/etc/group.new2 > $WORKDIR/dummysys/etc/group

rm -rf $WORKDIR/dummysys/etc/group.new1 $WORKDIR/dummysys/etc/group.new2

done

fi


# make sure the adduser and autologin functions of casper as set according to the mode

[ "$1" = "dist" ] && [ ! -d $WORKDIR/dummysys/home ] && mkdir $WORKDIR/dummysys/home
[ "$1" = "dist" ] && chmod 755 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin 
[ "$1" = "backup" ] && [ -d $WORKDIR/dummysys/home ] && rm -rf $WORKDIR/dummysys/home
[ "$1" = "backup" ] && chmod 644 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin

# copy over some of the necessary stuff for the livecd

if [ -f /etc/remastersys/preseed/custom.seed ]; then
cp /etc/remastersys/preseed/custom.seed $WORKDIR/ISOTMP/preseed/custom.seed
fi

if [ "$CDBOOTTYPE" = "ISOLINUX" ]; then

#BOOT Type is isolinux

cp /boot/memtest86+.bin $WORKDIR/ISOTMP/isolinux/memtest

# check and see if they have a custom isolinux already setup. eg. they copied over the isolinux folder from their original livecd or made a custom one for their distro

if [ ! -f /etc/remastersys/customisolinux/isolinux.cfg ]; then

find /usr -name 'isolinux.bin' -exec cp {} $WORKDIR/ISOTMP/isolinux/ \;

# setup isolinux for the livecd

#check if it is 8.04 or higher and if it is, add the direct install option to isolinux

VERSION=`lsb_release -r | awk '{print $2}' | awk -F "." '{print $1}'`

sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' /etc/remastersys/isolinux/isolinux.txt > $WORKDIR/ISOTMP/isolinux/isolinux.txt
cp /etc/remastersys/isolinux/isolinux.cfg $WORKDIR/ISOTMP/isolinux/isolinux.cfg


else

cp /etc/remastersys/customisolinux/* $WORKDIR/ISOTMP/isolinux/

fi

else

# Boot Type selected is GRUB

apt-get install -y grub

cp /boot/memtest86+.bin $WORKDIR/ISOTMP/boot/memtest
find /boot -name 'stage2_eltorito' -exec cp {} $WORKDIR/ISOTMP/boot/grub/ \;
find /usr -name 'stage2_eltorito' -exec cp {} $WORKDIR/ISOTMP/boot/grub/ \;
find /lib -name 'stage2_eltorito' -exec cp {} $WORKDIR/ISOTMP/boot/grub/ \;

mv /etc/default/grub /etc/default/grub.tmp
apt-get install -y grub2
mv /etc/default/grub.tmp /etc/default/grub


cp /etc/remastersys/grub/splash.xpm.gz $WORKDIR/ISOTMP/boot/splash.xpm.gz

# setup grub for the livecd

#check if it is 8.04 or higher and if it is, add the direct install option to grub

sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' /etc/remastersys/grub/menu.lst > $WORKDIR/ISOTMP/boot/grub/menu.lst


fi

ARCH=`archdetect | awk -F "/" '{print $1}'`

cat > $WORKDIR/ISOTMP/README.diskdefines <<FOO
#define DISKNAME  $LIVECDLABEL
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
FOO
cp $WORKDIR/ISOTMP/README.diskdefines $WORKDIR/ISOTMP/casper/README.diskdefines

sleep 1

# Step 4 - Make the filesystem.manifest and filesystem.manifest-desktop
echo "Creating filesystem.manifest and filesystem.manifest-desktop"

dpkg-query -W --showformat='${Package} ${Version}\n' \
        > $WORKDIR/ISOTMP/casper/filesystem.manifest


cp $WORKDIR/ISOTMP/casper/filesystem.manifest $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop

sleep 1

# Step 5 - Prepare casper.conf depending on whether this is a backup or dist

if [ "$1" = "backup" ]; then
LIVEUSER="`grep '^[^:]*:[^:]*:1000:' /etc/passwd | awk -F ":" '{ print $1 }'`"
fi

echo "# This file should go in /etc/casper.conf" > /etc/casper.conf
echo "# Supported variables are:" >> /etc/casper.conf
echo "# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM" >> /etc/casper.conf
echo " " >> /etc/casper.conf
echo "export USERNAME=\"$LIVEUSER\"" >> /etc/casper.conf
echo "export USERFULLNAME=\"Live session user\"" >> /etc/casper.conf
echo "export HOST=\"$LIVEUSER\"" >> /etc/casper.conf
echo "export BUILD_SYSTEM=\"Ubuntu\"" >> /etc/casper.conf

cp /etc/casper.conf $WORKDIR/dummysys/etc/

sleep 1


# if the mode is dist then renumber the uid's for any user with a uid greater than 1000
# and make the passwdrestore file so the uid's are restored before the script finishes
# if this is not done, the livecd user will not be created properly

if [ "$1" = "dist" ]; then

# make sure user-setup-apply is present in case backup mode was last used

if [ -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
cp /usr/lib/ubiquity/user-setup/user-setup-apply.orig /usr/lib/ubiquity/user-setup/user-setup-apply
fi

else

# since this is backup mode, prevent user-setup-apply from running during install
if [ ! -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
mv /usr/lib/ubiquity/user-setup/user-setup-apply /usr/lib/ubiquity/user-setup/user-setup-apply.orig
fi
echo "exit 0"> /usr/lib/ubiquity/user-setup/user-setup-apply
chmod 755 /usr/lib/ubiquity/user-setup/user-setup-apply

# copy the install icon to the sudo users desktop

cp `find /usr -name ubiquity*.desktop` /home/`grep '^[^:]*:[^:]*:1000:' /etc/passwd | awk -F ":" '{ print $1 }'`/Desktop

fi



sleep 1

echo "Setting up casper and ubiquity options for $1 mode"

rm -f /usr/share/ubiquity/apt-setup
echo "#do nothing" > /usr/share/ubiquity/apt-setup
chmod 755 /usr/share/ubiquity/apt-setup

# make a new initial ramdisk including the casper scripts

mkinitramfs -o /boot/initrd.img-`uname -r` `uname -r`

echo "Copying your kernel and initrd for the livecd"
cp /boot/vmlinuz-`uname -r` $WORKDIR/ISOTMP/casper/vmlinuz
cp /boot/initrd.img-`uname -r` $WORKDIR/ISOTMP/casper/initrd.gz

# Step 6 - Make filesystem.squashfs

if [ -f $WORKDIR/remastersys.log ]; then
rm -f $WORKDIR/remastersys.log
touch $WORKDIR/remastersys.log
fi


if [ -f $WORKDIR/ISOTMP/casper/filesystem.squashfs ]; then
rm -f $WORKDIR/ISOTMP/casper/filesystem.squashfs
fi

echo "Creating filesystem.squashfs   ... this will take a while so be patient"

#check if it is 8.04 or higher and if it is, add the -no-recovery option so it doesn't include the recovery file and provide higher compression mode

SQUASHFSOPTSHIGH="-no-recovery -always-use-fragments"

echo "Adding stage 1 files/folders that the livecd requires."

# add the blank folders and trimmed down /var to the cd filesystem

mksquashfs $WORKDIR/dummysys/ $WORKDIR/ISOTMP/casper/filesystem.squashfs -no-duplicates $SQUASHFSOPTSHIGH 2>>$WORKDIR/remastersys.log

sleep 1

echo "Adding stage 2 files/folders that the livecd requires."

# add the rest of the system depending on the mode selected

if [ "$1" = "backup" ]; then
mksquashfs / $WORKDIR/ISOTMP/casper/filesystem.squashfs -no-duplicates $SQUASHFSOPTSHIGH -e \
.thumbnails \
.cache \
.bash_history \
Cache \
boot/grub \
dev \
etc \
media \
mnt \
proc \
sys \
tmp \
var \
$WORKDIR $EXCLUDES 2>>$WORKDIR/remastersys.log

else
mksquashfs / $WORKDIR/ISOTMP/casper/filesystem.squashfs -no-duplicates $SQUASHFSOPTSHIGH -e \
.thumbnails \
.cache \
.bash_history \
Cache \
boot/grub \
dev \
etc \
home \
media \
mnt \
proc \
sys \
tmp \
var \
$WORKDIR $EXCLUDES 2>>$WORKDIR/remastersys.log

fi

sleep 1



#add some stuff the log in case of problems so I can troubleshoot it easier
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "Mount information" >>$WORKDIR/remastersys.log
mount >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "Casper Script info" >>$WORKDIR/remastersys.log
ls -l /usr/share/initramfs-tools/scripts/casper-bottom/ >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "/etc/remastersys.conf info" >>$WORKDIR/remastersys.log
cat /etc/remastersys.conf >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "/etc/casper.conf info" >>$WORKDIR/remastersys.log
cat /etc/casper.conf >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "/etc/passwd info" >>$WORKDIR/remastersys.log
cat $WORKDIR/dummysys/etc/passwd >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "/etc/group info" >>$WORKDIR/remastersys.log
cat $WORKDIR/dummysys/etc/group >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log
echo "Command-line options = $@" >>$WORKDIR/remastersys.log
echo "------------------------------------------------------" >>$WORKDIR/remastersys.log


# cleanup the install icons as they aren't needed on the current system

if [ "$1" = "backup" ]; then
rm -rf /home/`grep '^[^:]*:[^:]*:1000:' /etc/passwd | awk -F ":" '{ print $1 }'`/Desktop/ubiquity*.desktop
fi

sleep 1

#checking the size of the compressed filesystem to ensure it meets the iso9660 spec for a single file" 
SQUASHFSSIZE=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`
if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
echo " The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again."
echo " The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again.">>$WORKDIR/remastersys.log

exit 1
fi


}

#Gera arquivo iso do livecd do riso.
#Essa função foi criada com base no codigo do remastersys.
iso (){

    CREATEISO="`which mkisofs`"
    if [ "$CREATEISO" = "" ]; then
    CREATEISO="`which genisoimage`"
    fi

    # check to see if the cd filesystem exists

    if [ ! -f "$WORKDIR/ISOTMP/casper/filesystem.squashfs" ]; then
    echo "The cd filesystem is missing.  Either there was a problem creating the compressed filesystem or you are trying to run sudo remastersys dist iso before sudo remastersys dist cdfs"
    echo "The cd filesystem is missing.  Either there was a problem creating the compressed filesystem or you are trying to run sudo remastersys dist iso before sudo remastersys dist cdfs" >>$WORKDIR/remastersys.log

    exit 1
    fi

    #checking the size of the compressed filesystem to ensure it meets the iso9660 spec for a single file 
    SQUASHFSSIZE=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`
    if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
    echo " The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again."
    echo " The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again.">>$WORKDIR/remastersys.log

    exit 1
    fi

    # Step 7 - Make md5sum.txt for the files on the livecd - this is used during the
    # checking function of the livecd
    echo "Creating md5sum.txt for the livecd/dvd"
    cd $WORKDIR/ISOTMP && find . -type f -print0 | xargs -0 md5sum > md5sum.txt

    if [ "$CDBOOTTYPE" = "ISOLINUX" ]; then

    #isolinux mode

    # remove files that change and cause problems with checking the disk
    sed -e '/isolinux/d' md5sum.txt > md5sum.txt.new
    sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
    rm -f md5sum.txt.new

    sleep 1

    # Step 8 - Make the ISO file
    echo "Creating $CUSTOMISO in $WORKDIR"
    $CREATEISO    \
     -quiet \
     -r    \
     -V "$LIVECDLABEL"    \
     -cache-inodes    \
     -J    \
     -l    \
     -b isolinux/isolinux.bin    \
     -c isolinux/boot.cat    \
     -no-emul-boot    \
     -boot-load-size 4    \
     -boot-info-table    \
     -o $WORKDIR/$CUSTOMISO "$WORKDIR/ISOTMP" 2>>$WORKDIR/remastersys.log 1>>$WORKDIR/remastersys.log

    else

    #grub mode

    # remove files that change and cause problems with checking the disk
    sed -e '/boot/d' md5sum.txt > md5sum.txt.new
    sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
    rm -f md5sum.txt.new

    sleep 1

    # Step 8 - Make the ISO file
    echo "Creating $CUSTOMISO in $WORKDIR"
    $CREATEISO    \
     -quiet \
     -r    \
     -V "$LIVECDLABEL"    \
     -cache-inodes    \
     -J    \
     -l    \
     -b boot/grub/stage2_eltorito    \
     -no-emul-boot    \
     -boot-load-size 4    \
     -boot-info-table    \
     -o $WORKDIR/$CUSTOMISO "$WORKDIR/ISOTMP" 2>>$WORKDIR/remastersys.log 1>>$WORKDIR/remastersys.log

    fi

    # create the md5 sum file so the user doesn't have to - this is good so the iso file can later be tested to ensure it hasn't become corrupted

    echo "Creating $CUSTOMISO.md5 in $WORKDIR"

    md5sum $WORKDIR/$CUSTOMISO > $WORKDIR/$CUSTOMISO.md5

    sleep 1


    echo "$WORKDIR/$CUSTOMISO is ready to be burned or tested in a virtual machine."
    echo " "
    echo "Check the size and if it is larger than 700MB you will need to burn it to a dvd"
    echo " "
    ls -hs $WORKDIR/$CUSTOMISO
    echo " " 
    echo "It is recommended to run 'sudo remastersys clean' once you have burned and tested the $CUSTOMISO"
    echo " "

}

#Checklist de seleção.
menu_inicia_servidor() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja disponibilizar para o download na rede:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') inicia_servidor_windows;;
		'"Linux"') inicia_servidor_linux;;
		'"Windows" "Linux"') inicia_servidor;;
	esac
	
}

#Checklist de seleção.
menu_criar_imagens() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais imagens deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  \
	Recuperacao '' off )

	# De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') cria_windows && cria_torrent_windows && windows_criado;;
		'"Linux"') cria_linux && cria_torrent_linux && linux_criado;;
		'"Recuperacao"') cria_rec && rec_criado;;
		'"Windows" "Linux"') cria_windows && cria_torrent_windows && cria_linux && cria_torrent_linux && imagens_criadas;;
		'"Windows" "Recuperacao"') cria_rec && cria_windows && cria_torrent_windows && imagens_criadas;;
		'"Linux" "Recuperacao"') cria_rec && cria_linux && cria_torrent_linux && imagens_criadas;;
		'"Windows" "Linux" "Recuperacao"') cria_rec && cria_windows && cria_torrent_windows && cria_linux && cria_torrent_linux && imagens_criadas;;
	esac
	
}

#Checklist de seleção.
menu_criar_torrents() {

	opcao=$( dialog --stdout \
	--ok-label 'Confirmar'   \
	--checklist 'Quais torrents deseja criar:' \
	0 0 0 \
	Windows '' ON  \
	Linux '' ON  )

    # De acordo com a opção escolhida, executa funcoes
	case $opcao in
		'"Windows"') cria_torrent_windows && torrent_windows_criado;;
		'"Linux"') cria_torrent_linux && torrent_linux_criado;;
		'"Windows" "Linux"') cria_torrent_windows && cria_torrent_linux && torrents_criados;;
	esac
	
}

#Menu pricipal.
menu() {

	while : ; do
	opcao=$(
		dialog --stdout                         \
		--ok-label 'Confirmar'                  \
		--cancel-label 'Sair'                   \
		--title 'RISOS - 0.8'                   \
		--menu 'Escolha o que voce quer fazer:' \
			0 0 0                               \
			1 'Iniciar servidor'                \
			2 'Criar imagens'                   \
			3 'Criar torrents'                  \
			4 'Criar live-cd'                   \
			5 'Atualiza'                        \
			6 'Creditos'                        \
			7 'Help'                            )
	
		# ESC, sai do programa...
		[ $? -ne 0 ] && break
	
		# De acordo com a opção escolhida, executa funçao
		case $opcao in
			1) menu_inicia_servidor;;
			2) menu_criar_imagens;;
			3) menu_criar_torrents;;
			4) livecd "backup";;
			5) atualiza;;
			6) creditos;;
			7) helpi;;
		esac	

	done
	
}

#Verifica se usuário é root antes de iniciar o risos.
USER=`id -u`
if [ $USER == '0' ]; then
    log "Iniciando RISOS -------------------------------------------------------"
    carrega_variaveis && menu
    log "Finalizando RISOS -----------------------------------------------------"
	clear
else
	echo 'Só o root pode fazer isso, jovenzinho!'
fi
